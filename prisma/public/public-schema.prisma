generator client {
  provider = "prisma-client-js"
  output   = "../generated/public"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
}

model Recipe {
  id          Int      @id @default(autoincrement())
  sourceId    Int      @unique
  source      String?  @db.VarChar(16)
  title       String
  slug        String?  @unique
  json        Json
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories  Category[]   @relation("RecipeCategories")
  tags        Tag[]        @relation("RecipeTags")
  ingredients Ingredient[] @relation("RecipeIngredients")

  User User[]
}

model Category {
  id       Int      @id
  parentId Int?
  title    String
  slug     String   @unique
  recipes  Recipe[] @relation("RecipeCategories")
}

model Tag {
  id      Int      @id
  name    String
  slug    String   @unique
  recipes Recipe[] @relation("RecipeTags")
}

model Ingredient {
  id      BigInt   @id
  name    String
  slug    String   @unique
  recipes Recipe[] @relation("RecipeIngredients")
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  username            String    @unique
  password            String
  firstname           String
  lastname            String
  role                Role      @default(USER)
  verifyToken         String?   @unique
  resetToken          String?   @unique
  emailVerified       Boolean   @default(false)
  tokenCreatedAt      DateTime? @default(now())
  resetTokenCreatedAt DateTime? @default(now())
  createdAt           DateTime  @default(now())
  birthdate           DateTime?
  gender              Gender?
  Product             Recipe[]

  @@index([tokenCreatedAt], map: "idx_tokenCreatedAt")
}

model TokenValidity {
  userId    Int
  deviceId  String
  validFrom DateTime

  @@id([userId, deviceId])
}

enum Role {
  USER
  SUPERADMIN
  CREATOR
  PUBLISHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EntityType {
  PRODUCT
  CATEGORY
  USER
}

enum FileExtension {
  jpg
  png
}
